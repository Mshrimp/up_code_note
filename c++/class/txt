函数：
	函数重载
	swap(int a, int b);
	swap(double a, double b);
	函数模板
	template<typename typevalue>
	void swap(T & a, T &b);
	array : 
	template<typename T>
	void swap(T a[], T b[], int n);
	explicit:
	template<typename typevalue>
	void swap(T & a, T &b);

	template <> void swap<student>(student & a, student & b);

	一般函数  > 显式调用函数 >	模板函数 


类：
	定义类格式：
	class class_name{
		private:
		public:
		protected:
	};

	私有部分：private
	公有部分：public
	保护部分：protected

	对象而言，只可以访问公有部分，不可以访问私有部分和保护部分
	一般定义类由两部分组成：
		1 属性：private 类数据
		2 方法：public  就是类成员函数

	注意：
		函数传参不可以跟类中属性同名
		如果函数不可以修改成员属性，则在函数后面添加const


	初始化类时候则需要显式调用初始化函数
	为了解决定义对象的时候自动初始化 -> 构造函数

	定义构造函数
		1 必须跟类同名
		2 没有返回值 void都不需要
		3 必须是公有部分
		4 作用就是对类初始化
		5 不需要对象去调用函数
		6 构造函数可以重载
		7 也可以写默认参数(不能和其他构造函数相冲突)

	注意：
		1 不可以调用构造函数，因为构造函数不属于成员函数。对类初始作。
		2 如果没有构造函数，类会自动生成一个默认构造函数。但是这个默认构造函数什么都没有干。
		3 如果用户定义构造函数，则必须定义默认构造函数
			
		函数传参方式三种
			按值传递：	swap(int a, int b)
			按地址传递：swap(int *a, int *b)
			按引用传递：swap(int & a, int & b)

		4 一个类对象只能执行一次构造函数

	构造函数本质，就是对对象初始化。
	＝＝＝＝＝＝＝＝＝＝＝＝＝＝
	析构函数：清理性工作
	定义析构函数
		~class_name()
		1 没有返回类型
		2 不可以传参

	析构函数执行顺序和构造函数初始化顺序是相反的

	什么时候调用析构函数
		如果局部存储类对象，则析构函数在子函数调用结束后调用析构函数
		如果是全局、静态存储类对象，则在程序结束后调用析构函数
		如果是一个指针存储类对象，则在使用delete时自动调用析构函数
		如果是模块存储类对象，则在模块结束后自动调用析构函数。

	this:指针
	抽象数据类型

	抽闲数据类型通过类实现stack 分文件
	=====================================
	类模板:为了解决代码重用
		template<typename anytype> // or class

	运算术重载：
		Time operator+(const Time & t) const;

		1 重载后的运算术必须至少有一个操作数是用户定义类型
		2 使用运算术重载时不能违反运算术原来的句法规则，例如 求模(%)运算术重载成使用一个操作数。
		3 不能修改运算符优先级。
		4 不能创建信的运算符 例如 不能定义operator**()函数来求幂。
		5 不能重载如下一些运算符
			sizeof	: 求空间大小运算符
			.		: 成员运算符
			.*		: 成员指针运算符
			::		: 作用域解析运算符
			?:		: 条件运算符
		6 绝大多数运算符都可以通过成员或者非成员函数进行重载，但是如下的运算符只能通过成员函数重载
			=	: 赋值运算符
			()  : 函数调用运算符
			[]	: 下标运算符
			-> 	: 指针访问类成员的运算符。

	==========================================
	友元：friend
		友元有三种：
			友元函数：是通过让函数成为类友元，可以赋予函数与类的成员函数相同的访问权限
			友元类：
			友元成员函数：

	static : 静态类成员
		1 在类的方法实现中初始化静态变量，同时要指定静态成员所属的类
			int StringBad::num_string = 0;
		2 不可以在类声明中初始化，因为声明描述了是如何分配内存，并不分配内存。
		3 静态成员变量只有一个副本，所以不可以通过this指针来访问。

		function:
		1 静态成员函数不能访问非静态成员，只能访问静态成员
		2 调用静态成员函数方法
			int cout = class_name::statiname();
		3 静态成员函数不与类定对象关联，因此静态成员函数只能访问静态成员
		name age num

		const 
		const int function()
		const int function() const
		int function() const
		int function()
	复制构造函数：
		默认复制构造函数： 浅拷贝
		什么时候会调用复制构造函数
			StringBad one(two)
			StringBad one = two
			StringBad one = StringBad(two)
			StringBad *one = new StringBad(two)
		显式复制构造函数： 深拷贝

	创建一个类的时候会有一些特殊的函数
		默认构造函数：
		默认析构函数：
		默认复制构造函数：
		默认赋值运算符：
		默认地址运算符:

	类继承：
		从一个类派生出另一个类时， 原始类基类，继承类称为派生类
		class A{}; 基类
		class B{}; 派生类
		直接继承：
			class A{}; class B : public A{}; //A 是 B 的直接基类
		间接继承：
			class A{}; class B : public A{}; class C : public B{};
			//A 是 C 的间接基类
		多重继承：
			class A{}; class B{}; class C : puiblic A, public B{};

		单继承方式
			class 派生类 : 继承方式 基类名
			{
				
			}
			继承方式：
				public :	公有派生
				private:	私有派生
				protected:	保护派生
		多继承方式
			class 派生类 : 	继承方式1 基类名1,
							继承方式2 基类2，
							.....
							继承方式n 基类n
			{
			
			}
					派生类
		基类：		公有继承		私有继承	  保护继承
		公有成员：	公有成员		私有成员	  保护		  
		私有成员：	不可以继承		接口访问  	  接口访问
					通过基类接口访问
		保护成员：	保护部分		私有	  	   保护

		公有继承：
			派生类的对象只能访问基类公有部分，不可以访问其他部分
			派生类成员函数可以访问基类公有部分和保护部分，不可以访问私有部分。
			基类私有部分可以通过派生类访问公有部分来达到访问基类私有部分。
			创建一个派生类对象，程序首先船舰一个基类对象。
			
		基类对象是一个指针或者引用，它可以指向派生类对象，而且不需要牵制类型转换。

		多态公有继承：
			派生类对象使用基类的方法，就是派生类对象和基类对象使用了相同方法。为了不同类对象实现不同操作方法，则需要我们作如下处理
			1 在派生类中重新定义基类的方法
			2 使用虚方法

		virtual: 
			只能修饰方法公有部分  
	
	类实现链表

	=================================
	友元类：
		友元函数：非成员函数，不可以被被继承，但是可以访问类所有私有成员和保护成员
		友元类：友元类的所有方法(成员函数，而不是对象)都可以访问原始类的私有成员和保护成员


















